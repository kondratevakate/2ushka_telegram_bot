import os
import csv
import logging
import nest_asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    CallbackQueryHandler,
)

# Import FAQ content from separate file
from faq_content import FAQ_TEXT

nest_asyncio.apply()

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("/home/ubuntu/bot_errors.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "7809849560:AAHPQF54KnIzWMvj09KBJ9tTCkBjWuUktyA"
ADMIN_CHAT_ID = -1002453479330  # ID –∞–¥–º–∏–Ω-—á–∞—Ç–∞
FOLDER_PATH = "/home/ubuntu"
LOG_FILE = f"{FOLDER_PATH}/client_interactions.csv"
GUIDE_PAYMENT_LINK = "https://web.tribute.tg/p/9yV"
GUIDE_STARS_LINK = "https://t.me/tribute/app?startapp=p9yV"

CONCIERGE_PAYMENT_LINK = "https://web.tribute.tg/p/9yZ"
CONCIERGE_STARS_LINK = "https://t.me/tribute/app?startapp=p9yZ"

os.makedirs(FOLDER_PATH, exist_ok=True)

if not os.path.exists(LOG_FILE):
    with open(LOG_FILE, mode="w", newline="", encoding="utf-8") as file:
        writer = csv.DictWriter(file, fieldnames=["Timestamp", "User", "UserID", "Action"])
        writer.writeheader()

# Main menu with buttons
MAIN_MENU = ReplyKeyboardMarkup(
    [
        ["üß≠ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É", "üõí –ö—É–ø–∏—Ç—å –≥–∞–π–¥"],
        ["üìñ –û —Ç–∞—Ä–∏—Ñ–∞—Ö", "üíº –û–ø–ª–∞—Ç–∞ —Ç—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂"],
        ["‚ÑπÔ∏è –ß–∞—Å—Ç—ã–µ –í–æ–ø—Ä–æ—Å–∏–∫–∏", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"]
    ],
    resize_keyboard=True,
)

def log_action(user: str, user_id: int, action: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, mode="a", newline="", encoding="utf-8") as file:
        writer = csv.DictWriter(file, fieldnames=["Timestamp", "User", "UserID", "Action"])
        writer.writerow({"Timestamp": timestamp, "User": user, "UserID": user_id, "Action": action})

async def notify_admin(context: CallbackContext, message: str):
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)

async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_id = update.effective_user.id
    log_action(user, user_id, "Started bot")
    await notify_admin(context, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_text("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", reply_markup=MAIN_MENU)

async def about_tariffs(update: Update, context: CallbackContext) -> None:
    user = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_id = update.effective_user.id
    log_action(user, user_id, "Viewed tariffs")
    await notify_admin(context, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user} (ID: {user_id}) –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ç–∞—Ä–∏—Ñ—ã.")
    # Added "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" button for navigation
    keyboard = [
        [InlineKeyboardButton("–ì–∞–π–¥", callback_data="tariff_guide")],
        [InlineKeyboardButton("–¢—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂", callback_data="tariff_concierge")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:", reply_markup=reply_markup)

async def tariff_details(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    tariff_key = query.data.split("_")[1]
    tariffs = {
        "guide": (
            "üìñ *–ß—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ –≤ –≥–∞–π–¥–µ?*\n\n"
            "üëÄ *–û—Ç–∑—ã–≤ –ø—Ä–æ –≥–∞–π–¥:* –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ, –±–µ–∑ –≤–æ–¥—ã, —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –∫–∏—Ç–æ–≤/—Å–∏—è–Ω–∏—è, –ø—Ä–∏ —ç—Ç–æ–º —Ä–µ–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –Ω–µ –∫–æ–º–ø–∏–ª—è—Ü–∏—è –∏–Ω—Ñ—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n"
            "‚úÖ *–í—ã–±–æ—Ä –ª—É—á—à–∏—Ö –¥–∞—Ç*: —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∑–∞ –∫–∏—Ç–∞–º–∏ –∏ —Å–∏—è–Ω–∏–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã.\n"
            "üí° *–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:*\n"
            "‚Äî –î–∞—Ç—ã –∏ –º–µ—Å—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏ —É–≤–∏–¥–µ—Ç—å –∫–∏—Ç–æ–≤ –∏ —Å–∏—è–Ω–∏–µ.\n"
            "‚Äî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ñ–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º, –∏ –Ω–∏ –æ–¥–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã.\n\n"
            "üí∞ –¶–µ–Ω–∞: 1500 —Ä—É–±–ª–µ–π.\n\n"
            "üõí *–ö–∞–∫ –∫—É–ø–∏—Ç—å –≥–∞–π–¥?*\n"
            "‚Äî –û–ø–ª–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö —Å –∫–∞—Ä—Ç—ã –∏–ª–∏ Telegram –∑–≤–µ–∑–¥–∞–º–∏\n"
            f"‚Äî –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É –∑–∞ –¢–µ–ª–µ–≥—Ä–∞–º–º –∑–≤–µ–∑–¥—ã [–∑–¥–µ—Å—å]({GUIDE_STARS_LINK}) –∏–ª–∏ –ø–æ –∫–∞—Ä—Ç–µ —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üõí \"–ö—É–ø–∏—Ç—å –ì–∞–π–¥\"\n\n"
        ),
        "concierge": (
            "üíº *–ß—Ç–æ –¥–∞—ë—Ç —Ç—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂:*\n\n"
            "‚úÖ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥*: –º—ã —Å–æ—Å—Ç–∞–≤–∏–º –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –≤–∞—à–∏–º –¥–∞—Ç–∞–º –Ω–∞ –Ω–∞—Å—Ç—Ä–æ—é.\n"
            "‚úÖ *–ë–æ—Ä–µ–º—Å—è —Å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π*: –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–æ –ø–æ–∫—É–ø–∫—É –±–∏–ª–µ—Ç–æ–≤, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å—Ç—Ä–∞—Ö–æ–≤–∫—É.\n"
            "üí° *–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
            "‚Äî –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–¥ –≤–∞—à–∏ –¥–∞—Ç—ã.\n"
            "‚Äî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤—ã–º —Ç—É—Ä–∞–º –∏ –º–µ—Å—Ç–∞–º.\n"
            "‚Äî –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.\n"
            "üí∞ *–¶–µ–Ω–∞:*\n"
            "‚Äî –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: 5000 —Ä—É–±–ª–µ–π.\n"
            "‚Äî –ï—Å–ª–∏ –≤—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –≥–∞–π–¥, –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –º–µ–Ω—å—à–µ.\n\n"
            "üëÄ *–ü–æ—á–µ–º—É —ç—Ç–æ –∫—Ä—É—Ç–æ*: –∑–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏ –≤—ã —Å–Ω–∏–º–∞–µ—Ç–µ —Å —Å–µ–±—è –≥–æ–ª–æ–≤–Ω—É—é –±–æ–ª—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –≤–ø–µ—Ä–µ–¥.\n\n"
            "üõí *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É \"–¢—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂\":*\n"
            f"‚Äî –í–Ω–µ—Å–∏—Ç–µ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –≤ —Ä–∞–∑–º–µ—Ä–µ 1000 —Ä—É–±–ª–µ–π –ø–æ [—Å—Å—ã–ª–∫–µ]({CONCIERGE_STARS_LINK}) –Ω–∞ –æ–ø–ª–∞—Ç—É –¢–µ–ª–µ–≥—Ä–∞–º –∑–≤–µ–∑–¥–∞–º–∏ –∏–ª–∏ –ø–æ –∫–∞—Ä—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üíº \"–¢—Ä–µ–≤–µ–ª –ö–æ–Ω—Å—å–µ—Ä–∂\".\n"
            "‚Äî –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã –º—ã —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç –∏ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É.\n"
            "‚Äî –û—Å—Ç–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —Å—É–º–º—ã –≤—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ, –∫–æ–≥–¥–∞ –º—ã —Å–æ–≥–ª–∞—Å—É–µ–º –º–∞—Ä—à—Ä—É—Ç."
        )
    }
    if tariff_key in tariffs:
        await query.answer()
        await update.effective_message.reply_photo(
            photo=open(os.path.join(os.getcwd(), f"2ushka_telegram_bot/viz/{tariff_key}.jpg"), "rb"),
            caption=tariffs[tariff_key],
            parse_mode="Markdown"
        )

async def faq(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(FAQ_TEXT, parse_mode="Markdown")

# --- Helper function to request an email with "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é" option ---
async def request_email(update: Update, context: CallbackContext, request_type: str) -> None:
    context.user_data["awaiting_email"] = request_type
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]])
    # For purchase update, use the new custom text.
    if request_type == "purchase_update":
        text = ("–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à email, –º—ã –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã —Ä–∞–∑ –≤ –ø–æ–ª–≥–æ–¥–∞ –∏ –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å, "
                "–µ—Å–ª–∏ –æ—Ç–∫—Ä–æ—é—Ç—Å—è –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –∑–∞–∫—Ä–æ—é—Ç—Å—è –¥—Ä—É–≥–∏–µ.")
    else:
        text = ("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–æ–¥–±–æ—Ä–∫–µ –Ω–∞–≤—Å–µ–≥–¥–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.\n"
                "–ú—ã –Ω–µ –±—É–¥–µ–º —Å–ø–∞–º–∏—Ç—å, —É –Ω–∞—Å –ø–æ–∫–∞ –Ω–µ—á–µ–º ü•≤\n\n–í–≤–µ–¥–∏ —Å–≤–æ—é –ø–æ—á—Ç—É –∑–¥–µ—Å—å —Ç–µ–∫—Å—Ç–æ–º:")
    await update.effective_message.reply_text(text, reply_markup=keyboard)

# --- Function to send free selection content with three inline buttons ---
async def free_selection_send(update: Update, context: CallbackContext) -> None:
    free_text = "–ó–∞–±–∏—Ä–∞–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–¥–±–æ—Ä–∫–∏:"
    keyboard = [
        [InlineKeyboardButton("üìç 40+ –º–µ—Å—Ç –Ω–∞ –ö–æ–ª—å—Å–∫–æ–º", callback_data="free_link_yandex")],
        [InlineKeyboardButton("üöó –ì–∞–π–¥ –ø–æ –¢–µ—Ä–∏–±–µ—Ä–∫–µ", callback_data="free_link_teriberka")],
        [InlineKeyboardButton("üìã –¢–æ–ø 20 —Ç—É—Ä–æ–≤ –º–µ—á—Ç—ã –ø–æ –†–æ—Å—Å–∏–∏", callback_data="free_link_notion")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(free_text, reply_markup=reply_markup)

# --- Callback handler for free link buttons ---
async def free_link_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    callback_data = query.data
    user = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_id = update.effective_user.id
    if callback_data == "free_link_yandex":
        url = "https://yandex.com/maps/?bookmarks%5BpublicId%5D=mSuY2SbK"
        log_action(user, user_id, "Requested free link: 40+ –º–µ—Å—Ç –Ω–∞ –ö–æ–ª—å—Å–∫–æ–º")
    elif callback_data == "free_link_teriberka":
        url = "https://www.aviasales.ru/psgr/article/teriberka"
        log_action(user, user_id, "Requested free link: –ì–∞–π–¥ –ø–æ –¢–µ—Ä–∏–±–µ—Ä–∫–µ")
    elif callback_data == "free_link_notion":
        url = "https://fantastic-makemake-bce.notion.site/2025-19aeb694471180779cddcc1aeb88a3fe?pvs=4"
        log_action(user, user_id, "Requested free link: –¢–æ–ø 20 —Ç—É—Ä–æ–≤ –º–µ—á—Ç—ã –ø–æ –†–æ—Å—Å–∏–∏")
    else:
        return
    # Send the link as a message with the main menu for navigation
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–í–æ—Ç —Å—Å—ã–ª–∫–∞: {url}",
        reply_markup=MAIN_MENU
    )

# --- Handler for free selection requests ---
async def handle_free_selection(update: Update, context: CallbackContext) -> None:
    await free_selection_send(update, context)

# --- Handler for purchase requests ---
# The purchase link is sent immediately, then the bot asks for an email for updates.
async def handle_purchase(update: Update, context: CallbackContext) -> None:
    purchase_type = update.message.text.strip()
    if "–≥–∞–π–¥" in purchase_type.lower():
        link = GUIDE_PAYMENT_LINK
        message_text = (
            f"–î–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É: [–æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π]({link}) –∏–ª–∏ [—Ç–µ–ª–µ–≥—Ä–∞–º –∑–≤–µ–∑–¥–∞–º–∏]({GUIDE_STARS_LINK})\n"
            "*‚ùó–í–∞–∂–Ω–æ‚ùó*: –≥–∞–π–¥ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å—Å—ã–ª–∫–æ–π —Å—Ä–∞–∑—É –∂–µ –≤ —á–∞—Ç–µ Tribute –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ.\n\n"
            "–ú—ã —Å–ø—Ä–æ—Å–∏–º email, —á—Ç–æ–±—ã –≥–∞–π–¥ –¥–æ —Ç–µ–±—è —Ç–æ—á–Ω–æ –¥–æ—à—ë–ª.\n\n"
        )
    elif "—Ç—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂" in purchase_type.lower():
        link = CONCIERGE_PAYMENT_LINK
        message_text = (
            f"–î–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É: [–æ–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π]({link}) –∏–ª–∏ [—Ç–µ–ª–µ–≥—Ä–∞–º –∑–≤–µ–∑–¥–∞–º–∏]({CONCIERGE_STARS_LINK})\n"
            "–ú—ã —Å–∫–∏–Ω–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç, –≤—Ç—á –ø–∞—Ä—ã —á–∞—Å–æ–≤, –∫–∞–∫ –ø–æ–ª—É—á–∏–º –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É.\n\n"
        )
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=MAIN_MENU)
        return
    await update.message.reply_text(
        message_text,
        parse_mode="Markdown",
        reply_markup=MAIN_MENU,
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å email", callback_data="purchase_email")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    await update.message.reply_text("–ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, —á—Ç–æ–±—ã –≤–∞—Å —Ç–æ—á–Ω–æ –Ω–∞–π—Ç–∏, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email:", reply_markup=keyboard)
    context.user_data["awaiting_email"] = "purchase_update"

async def ask_question(update: Update, context: CallbackContext) -> None:
    user = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_id = update.effective_user.id
    log_action(user, user_id, "Asked a question")
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]])
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=keyboard)
    context.user_data["waiting_for_question"] = True

async def receive_text(update: Update, context: CallbackContext) -> None:
    if context.user_data.get("awaiting_email"):
        email = update.message.text.strip()
        request_type = context.user_data.pop("awaiting_email")
        user = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        user_id = update.effective_user.id
        log_action(user, user_id, f"Provided email for request ({request_type}): {email}")
        if request_type == "purchase_update":
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ, –≤–∞—à email –∑–∞–ø–∏—Å–∞–Ω.", reply_markup=MAIN_MENU)
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=MAIN_MENU)
        return

    if context.user_data.get("waiting_for_question"):
        user = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        user_id = update.effective_user.id
        question = update.message.text
        log_action(user, user_id, f"Sent a question: {question}")
        await notify_admin(context, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user} (ID: {user_id}) –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n\n{question}")
        await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.", reply_markup=MAIN_MENU)
        context.user_data["waiting_for_question"] = False

# --- Callback handler for inline buttons: Back to menu ---
async def back_to_menu_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=MAIN_MENU)

# --- Callback handler for "–û—Å—Ç–∞–≤–∏—Ç—å email" button in purchase flow ---
async def purchase_email_callback(update: Update, context: CallbackContext) -> None:
    await request_email(update, context, "purchase_update")

async def error_handler(update: object, context: CallbackContext) -> None:
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìñ –û —Ç–∞—Ä–∏—Ñ–∞—Ö"), about_tariffs))
    app.add_handler(MessageHandler(filters.Regex("üõí –ö—É–ø–∏—Ç—å –≥–∞–π–¥"), handle_purchase))
    app.add_handler(MessageHandler(filters.Regex("üíº –û–ø–ª–∞—Ç–∞ —Ç—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂"), handle_purchase))
    app.add_handler(MessageHandler(filters.Regex("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), ask_question))
    app.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è –ß–∞—Å—Ç—ã–µ –í–æ–ø—Ä–æ—Å–∏–∫–∏"), faq))
    app.add_handler(MessageHandler(filters.Regex("üß≠ –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É"), handle_free_selection))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_text))
    app.add_handler(CallbackQueryHandler(tariff_details, pattern="^tariff_"))
    app.add_handler(CallbackQueryHandler(free_link_callback, pattern="^free_link_"))
    app.add_handler(CallbackQueryHandler(back_to_menu_callback, pattern="^back_to_menu$"))
    app.add_handler(CallbackQueryHandler(purchase_email_callback, pattern="^purchase_email$"))
    app.add_error_handler(error_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏—è...")
    await app.run_polling()
    print("Polling –∑–∞–≤–µ—Ä—à–µ–Ω.")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
#nohup python /home/ubuntu/2ushka_telegram_bot/bot.py > bot.log 2>&1 &
