import os
import logging
from datetime import datetime
from telegram import Bot
import asyncio
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("payment_notifier.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7809849560:AAHPQF54KnIzWMvj09KBJ9tTCkBjWuUktyA"
TRIBUTE_CHAT_ID = -6675346585  # ID —á–∞—Ç–∞ Tribute
NOTIFICATIONS_CHAT_ID = -1002453479330  # ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

PAYMENT_PATTERNS = {
    "guide": r"–ü–æ–∫—É–ø–∫–∞ –≥–∞–π–¥–∞",
    "concierge": r"–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –∑–∞ —Ç—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂"
}

async def send_notification(bot: Bot, message: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        await bot.send_message(
            chat_id=NOTIFICATIONS_CHAT_ID,
            text=message,
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def process_tribute_message(bot: Bot, message_text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞ Tribute"""
    # –ò—â–µ–º username –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Ñ–æ—Ä–º–∞—Ç @username)
    username_match = re.search(r'@(\w+)', message_text)
    if not username_match:
        return

    username = username_match.group(1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏
    purchase_type = None
    for p_type, pattern in PAYMENT_PATTERNS.items():
        if re.search(pattern, message_text):
            purchase_type = p_type
            break

    if purchase_type:
        notification_text = (
            f"üéâ <b>–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
            f"üì¶ –¢–∏–ø –ø–æ–∫—É–ø–∫–∏: {purchase_type}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}\n"
            f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        )
        await send_notification(bot, notification_text)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–∞—Ç–∞ Tribute...")
    print(f"ID —á–∞—Ç–∞ Tribute: {TRIBUTE_CHAT_ID}")
    print(f"ID —á–∞—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {NOTIFICATIONS_CHAT_ID}")
    
    bot = Bot(token=BOT_TOKEN)
    last_update_id = 0
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            updates = await bot.get_updates(offset=last_update_id + 1, timeout=30)
            
            for update in updates:
                if update.message and update.message.chat.id == TRIBUTE_CHAT_ID:
                    await process_tribute_message(bot, update.message.text)
                    last_update_id = update.update_id
            
            # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            await asyncio.sleep(5)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await asyncio.sleep(5)

if __name__ == "__main__":
    asyncio.run(main()) 