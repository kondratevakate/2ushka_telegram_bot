import os
import csv
import logging
import pandas as pd
import nest_asyncio
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
    CallbackQueryHandler,
)

# –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ event loop
nest_asyncio.apply()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –≤ —Ñ–∞–π–ª bot_errors.log)
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("bot_errors.log", encoding="utf-8")
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7809849560:AAHPQF54KnIzWMvj09KBJ9tTCkBjWuUktyA"
ADMIN_CHAT_ID = -1002453479330  # ID –∞–¥–º–∏–Ω-—á–∞—Ç–∞
FOLDER_PATH = "."
LOG_FILE = f"{FOLDER_PATH}/client_interactions.csv"
GUIDE_PAYMENT_LINK = "https://web.tribute.tg/p/9yV"
CONCIERGE_PAYMENT_LINK = "https://web.tribute.tg/p/9yZ"

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–∞–ø–∫–∞ –¥–ª—è –ª–æ–≥–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(FOLDER_PATH, exist_ok=True)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Å –∫–æ–ª–æ–Ω–∫–∞–º–∏: Timestamp, User, UserID, Action)
if not os.path.exists(LOG_FILE):
    with open(LOG_FILE, mode="w", newline='', encoding="utf-8") as file:
        writer = csv.DictWriter(file, fieldnames=["Timestamp", "User", "UserID", "Action"])
        writer.writeheader()

MAIN_MENU = ReplyKeyboardMarkup(
    [["üìñ –û —Ç–∞—Ä–∏—Ñ–∞—Ö", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"], ["üõí –ö—É–ø–∏—Ç—å –≥–∞–π–¥", "üíº –¢—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂"], ["‚ÑπÔ∏è –ß–∞—Å—Ç—ã–µ –í–æ–ø—Ä–æ—Å–∏–∫–∏"]],
    resize_keyboard=True,
)

def log_action(user: str, user_id: int, action: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(LOG_FILE, mode="a", newline='', encoding="utf-8") as file:
        writer = csv.DictWriter(file, fieldnames=["Timestamp", "User", "UserID", "Action"])
        writer.writerow({"Timestamp": timestamp, "User": user, "UserID": user_id, "Action": action})

async def notify_admin(context: CallbackContext, message: str):
    # –ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –≤ —á–∞—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞–µ–≤
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=message)

async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_id = update.effective_user.id
    log_action(user, user_id, "Started bot")
    await notify_admin(context, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user} (ID: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:",
        reply_markup=MAIN_MENU,
    )

async def about_tariffs(update: Update, context: CallbackContext) -> None:
    user = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_id = update.effective_user.id
    log_action(user, user_id, "Viewed tariffs")
    await notify_admin(context, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user} (ID: {user_id}) –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ç–∞—Ä–∏—Ñ—ã.")
    keyboard = [
        [InlineKeyboardButton("–ì–∞–π–¥", callback_data="tariff_guide")],
        [InlineKeyboardButton("–¢—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂", callback_data="tariff_concierge")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:", reply_markup=reply_markup)

async def tariff_details(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    tariff_key = query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Ç–∞—Ä–∏—Ñ–∞

    tariffs = {
        "guide": (
            "üìñ *–ö–∞–∫—É—é –ø–æ–ª—å–∑—É –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç –≥–∞–π–¥–∞:*\n\n"
            "‚úÖ *–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞ –≤–µ—á–µ—Ä*: –≤–º–µ—Å—Ç–æ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –æ—Ç–∑—ã–≤–∞–º –Ω–∞ –∫–∞—Ä—Ç–∞—Ö.\n"
            "‚úÖ *–í—ã–±–æ—Ä –ª—É—á—à–∏—Ö –¥–∞—Ç*: —Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –∑–∞ –∫–∏—Ç–∞–º–∏ –∏ —Å–∏—è–Ω–∏–µ–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–æ–¥—ã –ø–æ–º–æ–≥—É—Ç –≤–∞–º –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–º–∞—Ö–æ–≤.\n"
            "‚úÖ *–≠–∫–æ–Ω–æ–º–∏—è –¥–æ 30%*: –Ω–∞—à–∏ —Å–æ–≤–µ—Ç—ã –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –∏ –≤—ã–±–æ—Ä—É —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ –ø–æ–º–æ–≥—É—Ç —Å–Ω–∏–∑–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.\n\n"
            "üí° *–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏:*\n"
            "‚Äî –î–∞—Ç—ã –∏ –º–µ—Å—Ç–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º–∏ —à–∞–Ω—Å–∞–º–∏ —É–≤–∏–¥–µ—Ç—å –∫–∏—Ç–æ–≤ –∏ —Å–∏—è–Ω–∏–µ.\n"
            "‚Äî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–∞—Ñ–µ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª—è—Ö.\n\n"
            "üí∞ –¶–µ–Ω–∞: 800 —Ä—É–±–ª–µ–π.\n\n"
            "üëÄ *–ü–æ—á–µ–º—É —ç—Ç–æ –∫—Ä—É—Ç–æ*: –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ —Ñ–æ—Ç–æ –ª–æ–∫–∞—Ü–∏–π –≤ —Ä–∞–∑–Ω—ã–µ —Å–µ–∑–æ–Ω—ã –∏ —É–∑–Ω–∞–µ—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–≥–∏–æ–Ω–∞."
        ),
        "concierge": (
            "üíº *–ß—Ç–æ –¥–∞—ë—Ç —Ç—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂:*\n\n"
            "‚úÖ *–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥*: –º—ã —Å–æ—Å—Ç–∞–≤–∏–º –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –≤–∞—à–∏–º –¥–∞—Ç–∞–º –Ω–∞ –Ω–∞—Å—Ç—Ä–æ—é.\n"
            "‚úÖ *–ì–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è*: –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –±–∏–ª–µ—Ç—ã, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã –∏–ª–∏ –¥—É–º–∞—Ç—å –æ —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞—Ö ‚Äî –º—ã –≤—Å—ë —Å–¥–µ–ª–∞–µ–º –∑–∞ –≤–∞—Å.\n"
            "‚úÖ *–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞*: –Ω–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å—ç–∫–æ–Ω–æ–º—è—Ç –¥–æ 2 –¥–Ω–µ–π –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏, –æ—Å—Ç–∞–≤–∏–≤ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞.\n\n"
            "üí° *–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:*\n"
            "‚Äî –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ–¥ –≤–∞—à–∏ –¥–∞—Ç—ã.\n"
            "‚Äî –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≥–æ—Ç–æ–≤—ã–º —Ç—É—Ä–∞–º –∏ –º–µ—Å—Ç–∞–º.\n"
            "‚Äî –ü–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è.\n"
            "üí∞ *–¶–µ–Ω–∞:*\n"
            "‚Äî –ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç: 4000 —Ä—É–±–ª–µ–π.\n"
            "‚Äî –ï—Å–ª–∏ –≤—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –≥–∞–π–¥, –¥–æ–ø–ª–∞—Ç–∞ –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: 3500 —Ä—É–±–ª–µ–π.\n\n"
            "üëÄ *–ü–æ—á–µ–º—É —ç—Ç–æ –∫—Ä—É—Ç–æ*: –∑–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ–∞–Ω—Å–∞ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏ –≤—ã —Å–Ω–∏–º–∞–µ—Ç–µ —Å —Å–µ–±—è –≥–æ–ª–æ–≤–Ω—É—é –±–æ–ª—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å –≤–ø–µ—Ä–µ–¥."
        ),
    }

    if tariff_key in tariffs:
        await query.answer()
        await update.effective_message.reply_photo(
            photo=open(os.path.join(os.getcwd(), f"viz/{tariff_key}.jpg"), "rb"),
            caption=tariffs[tariff_key],
            parse_mode="Markdown",
        )

async def faq(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "üí° *–í–æ–ø—Ä–æ—Å–∏–∫–∏:*\n\n"
        "1Ô∏è‚É£ *–î–ª—è –∫–æ–≥–æ —ç—Ç–æ—Ç –≥–∞–π–¥?*\n"
        "‚Äî –î–ª—è —Å–æ–ª–æ-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–µ–Ω –±—ã—Å—Ç—Ä—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π.\n\n"
        "2Ô∏è‚É£ *–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç –≥–∞–π–¥?*\n"
        "‚Äî –û–ø—ã—Ç –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–æ–≥—É—Ç –∏–∑–±–µ–∂–∞—Ç—å —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –ø—É—Ç–∏.\n\n"
        "3Ô∏è‚É£ *–ü–æ—á–µ–º—É —Ç–∞–∫–∞—è —Ü–µ–Ω–∞?*\n"
        "‚Äî –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–µ–µ.\n\n"
        "4Ô∏è‚É£ *–ü–æ—á–µ–º—É –∫–æ–Ω—Å—å–µ—Ä–∂-—Å–µ—Ä–≤–∏—Å?*\n"
        "‚Äî –ü–æ—Ç–æ–º—É —á—Ç–æ –∏–Ω–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∏ –≥–æ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.\n\n"
        "5Ô∏è‚É£ *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –≥–∞–π–¥ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º?*\n"
        "‚Äî –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏ —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –¥–æ—Å—Ç—É–ø–µ.\n\n"
        "6Ô∏è‚É£ *–ö–∞–∫ –±—ã—Å—Ç—Ä–æ —è –ø–æ–ª—É—á—É –≥–∞–π–¥?*\n"
        "‚Äî –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.\n\n"
        "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –∑–∞–¥–∞–π—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'.",
        parse_mode="Markdown",
    )

async def handle_purchase(update: Update, context: CallbackContext) -> None:
    user = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_id = update.effective_user.id
    purchase_type = update.message.text.strip()

    if "–≥–∞–π–¥" in purchase_type.lower():
        link = GUIDE_PAYMENT_LINK
    elif "—Ç—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂" in purchase_type.lower():
        link = CONCIERGE_PAYMENT_LINK
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∫—É–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    try:
        await update.message.reply_text(
            f"–û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: [–û–ø–ª–∞—Ç–∏—Ç—å]({link})",
            parse_mode="Markdown",
            reply_markup=MAIN_MENU,
        )
        log_action(user, user_id, f"Initiated purchase: {purchase_type}")
        await notify_admin(context, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user} (ID: {user_id}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É: {purchase_type}")
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏: %s", e)
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=MAIN_MENU,
        )

async def ask_question(update: Update, context: CallbackContext) -> None:
    user = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    user_id = update.effective_user.id
    log_action(user, user_id, "Asked a question")
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
        reply_markup=ReplyKeyboardRemove(),
    )
    context.user_data["waiting_for_question"] = True

async def receive_question(update: Update, context: CallbackContext) -> None:
    if context.user_data.get("waiting_for_question"):
        user = update.effective_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        user_id = update.effective_user.id
        question = update.message.text
        log_action(user, user_id, f"Sent a question: {question}")
        await notify_admin(context, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user} (ID: {user_id}) –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n\n{question}")
        await update.message.reply_text(
            "–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.",
            reply_markup=MAIN_MENU,
        )
        context.user_data["waiting_for_question"] = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —á–∞—Ç
async def error_handler(update: object, context: CallbackContext) -> None:
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:", exc_info=context.error)

async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("üìñ –û —Ç–∞—Ä–∏—Ñ–∞—Ö"), about_tariffs))
    app.add_handler(MessageHandler(filters.Regex("üõí –ö—É–ø–∏—Ç—å –≥–∞–π–¥"), handle_purchase))
    app.add_handler(MessageHandler(filters.Regex("üíº –¢—Ä–µ–≤–µ–ª-–∫–æ–Ω—Å—å–µ—Ä–∂"), handle_purchase))
    app.add_handler(MessageHandler(filters.Regex("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), ask_question))
    app.add_handler(MessageHandler(filters.Regex("‚ÑπÔ∏è –ß–∞—Å—Ç—ã–µ –í–æ–ø—Ä–æ—Å–∏–∫–∏"), faq))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_question))
    app.add_handler(CallbackQueryHandler(tariff_details))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏—è...")
    await app.run_polling()
    print("Polling –∑–∞–≤–µ—Ä—à–µ–Ω.")

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
